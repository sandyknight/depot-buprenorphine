---
title: "My Dual-Format Document"
author: "Your Name"
date: "2025-01-23"
format:
  html:
    toc: true
    self-contained: true
    theme: darkly
    execute:
      echo: true
      warning: true
      message: true
---





I need to load `data.table` here because operators like `.()` or `:=` can't be accessed with `::` in the way e.g. `jsonlite::read_json()` can. 

```{r setup}
library(data.table)
```
Function to unzip the datafile and inspect what we've got.

```{r function-unzip_datafile}

unzip_datafile <- function(zipfile = "RAND-LAB-dataset.zip")
  if (length(list.files("data/")) < 2) {
    unzip(file.path("data", zipfile), exdir = "data")
    list.files("data/")
  } else {
    list.files("data/")
  }
```

```{r}
unzip_datafile()
```
There are three datasets:
- `r list.files("data")[1]`, which I'll refer to as *main*, contains client IDs and characteristics.
- `r list.files("data")[2]`, which I'll refer to as *sir*, contains date and details of sub-intevention reviews (SIRs), including whether or not the client was receiving LAB at the date of the SIR.
- `r list.files("data")[3]`, which I'll refer to as *top*

Define a quick validation function to check our datasets

```{r function-check_data_qualtiy}

check_data_quality <- function(df) {
  agent <-
    pointblank::create_agent(tbl = df) |>
    pointblank::col_vals_not_null(dplyr::everything()) |>
    pointblank::rows_distinct() |>
    pointblank::rows_complete() |>
    pointblank::interrogate()

  short_summary <- pointblank::get_agent_report(agent) 
   short_summary[c(tbl_name, assertion_type, n_failed, n_passed, end_time)] 

  # Print short summary
  print(short_summary)
}


```

Load the *main* dataset and run the data quality check

```{r}
df <-
  data.table::fread("data/K3anon_FullDataset_for_VfM.csv")

check_data_quality(df)
```

Define a function to get the UTLA23 data from an official source and what I hope is a permanent link. Since our main table only has the utla23cd we need this to have any local authority names. 


```{r function-get_utla23_data}

get_utla23_data <- function() {

  uri <- "https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/UTLA_APR_2023_UK_NC/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson"

  geo <- jsonlite::read_json(uri, simplifyVector = TRUE)

  geo <- data.table::as.data.table(geo[["features"]])

  data.table::setnames(geo, tolower(gsub("properties\\.", "", names(geo))))

  geo[grep("^E", utla23cd, perl = TRUE), .(utla23cd, utla23nm)]

}
```
